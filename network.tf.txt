resource "aws_vpc" "vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support   = false
  enable_dns_hostnames = false
  tags = {
     Name = "${var.project-id}-vpc"
     PROJECT-ID = var.project-id
  }
}

// gateways
resource "aws_internet_gateway" "vpc_internet_gateway" {
  vpc_id = aws_vpc.vpc.id
   tags = {
     Name = "${var.project-id}-${aws_vpc.vpc.id}-igw"
     VPC-ID = aws_vpc.vpc.id
     PROJECT-ID = var.project-id
  }
}

resource "aws_eip" "nat_eip" {
  vpc        = true
  depends_on = [aws_internet_gateway.vpc_internet_gateway]
}

resource "aws_nat_gateway" "nat" {
  allocation_id = "${aws_eip.nat_eip.id}"
  subnet_id     = "${element(aws_subnet.public_subnet.*.id, 0)}"
  depends_on    = [aws_internet_gateway.vpc_internet_gateway]
  tags = {
    Name = "${var.project-id}-${aws_vpc.vpc.id}-natgateway"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}

// subnets
resource "aws_subnet" "public_subnet" {
  vpc_id                  = "${aws_vpc.vpc.id}"
  count                   = "${length(local.public_subnets_cidr)}"
  cidr_block              = "${element(local.public_subnets_cidr, count.index)}"
  availability_zone       = "${element(local.availability_zones, count.index)}"
  map_public_ip_on_launch = true
  tags = {
    Name        = "${var.project-id}-${aws_vpc.vpc.id}-public-subnet-${count.index}"
    TYPE        = "PUBLIC"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}

resource "aws_subnet" "private_subnet" {
  vpc_id                  = "${aws_vpc.vpc.id}"
  count                   = "${length(local.private_subnets_cidr)}"
  cidr_block              = "${element(local.private_subnets_cidr, count.index)}"
  availability_zone       = "${element(local.availability_zones, count.index)}"
  map_public_ip_on_launch = false
  tags = {
    Name        = "${var.project-id}-${aws_vpc.vpc.id}-private-subnet-${count.index}"
    TYPE        = "PRIVATE"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}

// route tables
resource "aws_route_table" "private" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = {
    Name        = "${var.project-id}-${aws_vpc.vpc.id}-private-route-table"
    TYPE        = "PRIVATE"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}

resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = {
    Name        = "${var.project-id}-${aws_vpc.vpc.id}-public-route-table"
    TYPE        = "PUBLIC"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}

resource "aws_route" "public_internet_gateway" {
  route_table_id         = "${aws_route_table.public.id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = "${aws_internet_gateway.vpc_internet_gateway.id}"
}

resource "aws_route" "private_nat_gateway" {
  route_table_id         = "${aws_route_table.private.id}"
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = "${aws_nat_gateway.nat.id}"
}

resource "aws_route_table_association" "public" {
  count          = "${length(local.public_subnets_cidr)}"
  subnet_id      = "${element(aws_subnet.public_subnet.*.id, count.index)}"
  route_table_id = "${aws_route_table.public.id}"
}
resource "aws_route_table_association" "private" {
  count          = "${length(local.private_subnets_cidr)}"
  subnet_id      = "${element(aws_subnet.private_subnet.*.id, count.index)}"
  route_table_id = "${aws_route_table.private.id}"
}

// network ACL
resource "aws_network_acl" "main" {
  vpc_id = aws_vpc.vpc.id
  subnet_ids = aws_subnet.public_subnet.*.id
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_block = "0.0.0.0/0"
    action = "allow"
    rule_no = 200
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_block = "0.0.0.0/0"
    action = "allow"
    rule_no = 201
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_block = "0.0.0.0/0"
    action = "allow"
    rule_no = 202
  }

  egress {
    protocol   = -1
    rule_no    = 200
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  tags = {
    Name = "${var.project-id}-${aws_vpc.vpc.id}-wordpress-webapp-nacl"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}

// security groups
resource "aws_security_group" "web-app-security-group" {
  name        = "${var.project-id}-${aws_vpc.vpc.id}-wordpress-webapp-sg"
  description = "Allow all TLS, HTTP and SSH inbound traffic"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description = "TLS from VPC"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "SSH from VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "${var.project-id}-${aws_vpc.vpc.id}-wordpress-webapp-sg"
    VPC-ID = aws_vpc.vpc.id
    PROJECT-ID = var.project-id
  }
}