resource "tls_private_key" "ec2-private-key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "deployer" {
  key_name   = var.project-id
  public_key = tls_private_key.ec2-private-key.public_key_openssh
}

resource "aws_launch_configuration" "wordpress-app-lc" {
    name_prefix = "wordpress-app-"
    image_id = "ami-04b1ddd35fd71475a"
    instance_type = "t2.micro"
    security_groups = [aws_security_group.web-app-security-group.id]
    user_data = <<EOF
sudo docker run --name wordpress -p 80:80 -e WORDPRESS_DB_HOST="${aws_db_instance.wordpress-mysql-db.endpoint}" -e WORDPRESS_DB_USER="${aws_db_instance.wordpress-mysql-db.username}" -e WORDPRESS_DB_PASSWORD="${aws_db_instance.wordpress-mysql-db.password}" wordpress
EOF
    key_name = aws_key_pair.deployer.id

    lifecycle {
        create_before_destroy = true
    }

    root_block_device {
        volume_type = "gp2"
        volume_size = "50"
    }
}

resource "aws_placement_group" "wordpress-app-pg" {
  name     = "multi-az-spread"
  strategy = "spread"
}

resource "aws_autoscaling_group" "wordpress-app-asg" {
    name = "wordpress-app-asg"
    max_size = "21"
    min_size = "1"
    health_check_grace_period = 300
    health_check_type = "EC2"
    desired_capacity = 2
    force_delete = true
    launch_configuration = "${aws_launch_configuration.wordpress-app-lc.name}"
    vpc_zone_identifier = aws_subnet.public_subnet.*.id
    placement_group = aws_placement_group.wordpress-app-pg.id

    tag {
        key = "Name"
        value = "wordpress-app-asg"
        propagate_at_launch = true
    }
}

resource "aws_autoscaling_policy" "wordpress-app-scale-up" {
    name = "agents-scale-up"
    scaling_adjustment = 1
    adjustment_type = "ChangeInCapacity"
    cooldown = 300
    autoscaling_group_name = aws_autoscaling_group.wordpress-app-asg.name
}

resource "aws_autoscaling_policy" "wordpress-app-scale-down" {
    name = "agents-scale-down"
    scaling_adjustment = -1
    adjustment_type = "ChangeInCapacity"
    cooldown = 300
    autoscaling_group_name = aws_autoscaling_group.wordpress-app-asg.name
}

resource "aws_cloudwatch_metric_alarm" "memory-high" {
    alarm_name = "mem-util-high-agents"
    comparison_operator = "GreaterThanOrEqualToThreshold"
    evaluation_periods = "2"
    metric_name = "MemoryUtilization"
    namespace = "System/Linux"
    period = "300"
    statistic = "Average"
    threshold = "80"
    alarm_description = "This metric monitors ec2 memory for high utilization on agent hosts"
    alarm_actions = [
        "${aws_autoscaling_policy.wordpress-app-scale-up.arn}"
    ]
    dimensions = {
        AutoScalingGroupName = "${aws_autoscaling_group.wordpress-app-asg.name}"
    }
}

resource "aws_cloudwatch_metric_alarm" "memory-low" {
    alarm_name = "mem-util-low-agents"
    comparison_operator = "LessThanOrEqualToThreshold"
    evaluation_periods = "2"
    metric_name = "MemoryUtilization"
    namespace = "System/Linux"
    period = "300"
    statistic = "Average"
    threshold = "40"
    alarm_description = "This metric monitors ec2 memory for low utilization on agent hosts"
    alarm_actions = [
        "${aws_autoscaling_policy.wordpress-app-scale-down.arn}"
    ]
    dimensions = {
        AutoScalingGroupName = "${aws_autoscaling_group.wordpress-app-asg.name}"
    }
}